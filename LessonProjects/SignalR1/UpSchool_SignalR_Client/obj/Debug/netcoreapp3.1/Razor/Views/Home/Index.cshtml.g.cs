#pragma checksum "C:\Users\User\Desktop\UpSchoolBootcamp\UpSchool_SignalR_Api\UpSchool_SignalR_Client\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b9a2ef03340b2d8df81c5d9032be84d3d13792d8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\User\Desktop\UpSchoolBootcamp\UpSchool_SignalR_Api\UpSchool_SignalR_Client\Views\_ViewImports.cshtml"
using UpSchool_SignalR_Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\User\Desktop\UpSchoolBootcamp\UpSchool_SignalR_Api\UpSchool_SignalR_Client\Views\_ViewImports.cshtml"
using UpSchool_SignalR_Client.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b9a2ef03340b2d8df81c5d9032be84d3d13792d8", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f89c983a6ed07c1a3943e0f838b592ee3819a082", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\User\Desktop\UpSchoolBootcamp\UpSchool_SignalR_Api\UpSchool_SignalR_Client\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b9a2ef03340b2d8df81c5d9032be84d3d13792d83833", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(document).ready(()=>{
            var connection = new signalR.HubConnectionBuilder()
            .withAutomaticReconnect([1000,2000,3000,8000]).
            //with automatic reconnect bağlantı koptuğunda otomatik yeniden bağlantı isteği atar.
               //içine verdiğim sürelerde, verilen sürelerde ayağa kaldırmayı denemesini sağlayabiliriz
               //bağlantı koptuğunda 1.saniyede 2,saniye, 3.saniye, 8.saniye istek atsın. ve 4 defa istek atsın 
            withUrl(""https://localhost:44369/MyHub"").build();
            //Bu adresteki 
            //portu bir sunucu olarak kullan ve bunun üzerinden bir bağlantı oluştur.
            //bağlantı olarak api adresi verilir. Apide oluşturduğumuz startupda 
            // endpointtede 
            //tanımladığımız MyHub'a gidecek yönlendirecek


            function statusShow(){
                //conStatus çok fazla tekrar ettiği için fonksiyon içinde yazalım.
                $(""#conStatus"").text(connection.connect");
                WriteLiteral(@"ionState);//bağlandıktan sonraki
                //durumunu yazdırır.

            }
            statusShow();//bağlantının durumunu yazar.
            //connect, reconnect, disconnect gibi.

            connection.start().then(()=>{
                //bağlantıyı başlattıktan sonra
              statusShow();
                //eğer hub connected olursa loading'i gizle
                $(""#loading"").hide();
                connection.invoke(""GetNames"");

            }).catch((err)=>{//hata varsa bağlantı sırasında catch ile yakalar
                console.log(err)
            });

            //burada amaç butona tıklayınca sayfadan gönderdiğim ismi
            //konsolda ekrana yazdırmak 

            $(""#btnSave"").click(()=>{
                connection.invoke(""SendName"",$(""#txtName"").val())
                            .catch((err)=>{
                                console.log(err)
                            })
            })
            connection.on(""ReceiveName"",(name)=>{
      ");
                WriteLiteral(@"          //console.log(name);
                //konsolda yazdırmak yerine tabloda html üzerinde yazdıralım
                //alt gr+ ; ile `` ile backlink işareti içinde html yazıyoruz. javascript içinde

                $(""#namesList"").append(`<li class=""list-group-item"">${name}</li>`)


            })

            connection.onreconnecting(err=>{
                //eğer yeniden bağlanma sürecinde ise bunu bana göstersin
                //yani bağlantı kesilip yeniden bağlanmaya çalışırsa bunu göstersin
                $(""#loading"").show();
                statusShow();
                console.log(err);
            })

            connection.onreconnected(err=>{
                //eğer yeniden bağlantı kurmayı başarırsa
                $(""#loading"").hide();
                statusShow();
                console.log(err);
            })

            //on komutu ile her zaman bağlanırken MyHub class içinde verdiğim string ifadeyi yazalım.
            //yani ReceiveClientCount ama Invoke ");
                WriteLiteral(@"ile yazdığımın içerisine method isimleri yazılır.
            //OnConnectedAsync gibi.
            //bağlanan istemci sayısını gösterecek. 
            connection.on(""ReceiveClientCount"",(ClientCount)=>{
                $(""#clientCount"").text(ClientCount);
            })

            //yine bağlantı atılacak
            //bu defa Notify'a subscribe olacağım
            //oda da kaç kişi bulunabileceğini (maximum) yazacak
            connection.on(""Notify"",(countText)=>{
                $(""#notify"").html(`<div class=""alert alert-success"">${countText}</div>`);
            })

            connection.on(""Error"",(errorText)=>{
                alert(errorText);
                //error text içeriği myhub'da yer alan SendName içindeki Error'dan gelecek
            })
            connection.on(""ReceiveNames"",(names)=>{
                $(""#namesList"").empty();//önce nameslist'in içini boşalt
                names.forEach((item,index)=>{
                    $(""#namesList"").append(`<li class=""list-gr");
                WriteLiteral("oup-item\">${item}</li>`);\r\n                })\r\n            })\r\n\r\n\r\n\r\n          \r\n\r\n    \r\n        });\r\n    </script>\r\n\r\n");
            }
            );
            WriteLiteral(@"<div class=""row"">
    <div class=""col-md-8 offset-2"">

        <input type=""text"" class=""form-control"" id=""txtName""/>
        <hr />
        <button class=""btn btn-warning"" id=""btnSave"">İsmi Kaydet</button>
        
        <div class=""alert alert-info mt-2"">
            <div class=""float-left"">
                Bağlantı Durumu : <strong id=""conStatus""></strong>
                <!--js içinde tanımladığım kısım-->
                ,Client Sayısı : <strong id=""clientCount""></strong>
                <!--Buradaki client sayısı aktif kişi sayısını gösterecek sosyal medyada
                    bu odada aktif online kaç kişi var gibi zoom gibi platformlarda
                -->

            </div>
            <!--loading ekleyelim.-->
            <div class=""float-right"">
                <div id=""loading"" class=""spinner-border"" role=""status"">
                    <span class=""visually-hidden""></span>

                </div>

            </div>
            <div class=""clearfix"">

            </");
            WriteLiteral("div>\r\n\r\n        </div>\r\n\r\n        <div id=\"notify\">\r\n\r\n        </div>\r\n\r\n    </div>\r\n    <!--isimleri tabloda gösterme-->\r\n    <div class=\"col-md-8 offset-2\">\r\n        <ul class=\"list-group\" id=\"namesList\"></ul>\r\n\r\n    </div>\r\n\r\n</div>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591

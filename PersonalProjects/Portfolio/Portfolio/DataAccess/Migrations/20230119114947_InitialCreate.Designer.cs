// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Portfolio.DataAccess.Context;

#nullable disable

namespace Portfolio.DataAccess.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20230119114947_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Portfolio.DataAccess.Entities.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Experience")
                        .HasColumnType("text");

                    b.Property<string>("Information")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("About", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Liberta Sofware Inc.",
                            Experience = "26 months",
                            Information = "Create and customize easily comprehensible reports. ",
                            Title = "Data Analyst and Reporting"
                        },
                        new
                        {
                            Id = 2,
                            Company = "DvSoft",
                            Experience = "6 months",
                            Information = "E-Commerce Web Site Backend Developer. ",
                            Title = "Junior Sofware Developer"
                        },
                        new
                        {
                            Id = 3,
                            Company = "Upschool-Akbank",
                            Experience = "4 months",
                            Information = ".net Development Course",
                            Title = ".net Intern"
                        },
                        new
                        {
                            Id = 4,
                            Company = "Ultimate Solutions",
                            Experience = "8 months",
                            Information = ".net Junior Developer",
                            Title = "Junior .net Developer"
                        });
                });

            modelBuilder.Entity("Portfolio.DataAccess.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetail")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressDetail = "TURKEY",
                            Location = "TURKEY",
                            Mail = "test@hotmail.com",
                            Phone = "+90 555 666 777 88 99"
                        });
                });

            modelBuilder.Entity("Portfolio.DataAccess.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LinkAddress")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LinkAddress = "https://github.com/safakca/SA.OopExamples",
                            Name = "OOP Examples"
                        },
                        new
                        {
                            Id = 2,
                            LinkAddress = "https://github.com/safakca/SA.BaseWebApiNetCore5",
                            Name = "Base Web Api In .net 5"
                        },
                        new
                        {
                            Id = 3,
                            LinkAddress = "https://github.com/safakca/SA.BaseCQRS",
                            Name = "CQRS In .net 5"
                        },
                        new
                        {
                            Id = 4,
                            LinkAddress = "https://github.com/safakca/BaseAPI/tree/master/CQRSapi_2",
                            Name = "CQRS nTier In .net 5"
                        },
                        new
                        {
                            Id = 5,
                            LinkAddress = "https://github.com/safakca/SA.BaseFileUpload",
                            Name = "File Upload In .net 6"
                        },
                        new
                        {
                            Id = 6,
                            LinkAddress = "https://github.com/safakca/SA.KUSYS-DEMO",
                            Name = "Case Example"
                        },
                        new
                        {
                            Id = 7,
                            LinkAddress = "https://github.com/safakca/SA.BaseSignalRChatApp",
                            Name = "Chat App In .net 7 with SignalR"
                        },
                        new
                        {
                            Id = 8,
                            LinkAddress = "https://github.com/safakca/SA.ApiConsume",
                            Name = "Api Consume In .net 6 with MVC"
                        },
                        new
                        {
                            Id = 9,
                            LinkAddress = "https://github.com/safakca/SA.BaseIdentity",
                            Name = "Base Identity In .net 6"
                        });
                });

            modelBuilder.Entity("Portfolio.DataAccess.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Detail = "https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Detail = "https://visualstudio.microsoft.com/tr/",
                            Name = "Visual Studio"
                        },
                        new
                        {
                            Id = 3,
                            Detail = "https://code.visualstudio.com/",
                            Name = "Visual Studio Code"
                        },
                        new
                        {
                            Id = 4,
                            Detail = "https://learn.microsoft.com/tr-tr/dotnet/core/introduction",
                            Name = ".net"
                        },
                        new
                        {
                            Id = 5,
                            Detail = "https://learn.microsoft.com/tr-tr/dotnet/core/introduction",
                            Name = ".netCore"
                        },
                        new
                        {
                            Id = 6,
                            Detail = "https://learn.microsoft.com/en-us/ef/ef6/get-started",
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = 7,
                            Detail = "https://github.com/",
                            Name = "Github"
                        },
                        new
                        {
                            Id = 8,
                            Detail = "https://about.gitlab.com/",
                            Name = "GitLab"
                        },
                        new
                        {
                            Id = 9,
                            Detail = "https://www.postman.com/",
                            Name = "Postman"
                        },
                        new
                        {
                            Id = 10,
                            Detail = "https://swagger.io/",
                            Name = "Swagger"
                        },
                        new
                        {
                            Id = 11,
                            Detail = "https://www.microsoft.com/tr-tr/sql-server/sql-server-2019",
                            Name = "MsSQL"
                        },
                        new
                        {
                            Id = 12,
                            Detail = "https://www.postgresql.org/",
                            Name = "PosgreSQL"
                        },
                        new
                        {
                            Id = 13,
                            Detail = "https://www.mongodb.com/",
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = 14,
                            Detail = "https://www.atlassian.com/software/jira",
                            Name = "Jira"
                        },
                        new
                        {
                            Id = 15,
                            Detail = "https://trello.com/",
                            Name = "Trello"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
